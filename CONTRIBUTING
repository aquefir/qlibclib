Qlibc Contributor’s Guide

Written by Alexander Nicholi

This library is written in ISO C99, as specified in document ISO 9899:1999.



§1. PROGRAMMING PARADIGMS
--------------------------

1. A mixture of procedural programming and functional programming is applied.
Object-oriented programming is eliminated in project code, and handled
carefully with libraries using it.

2. This conceptual table illustrates the duality of the code, in ascending
order of abstraction:

	+----------------------+---------------------------------------+
	| Model level          | Relationship                          |
	+----------------------+---------------------------------------+
	| Programmer’s [Lv. 1] | Code file (.c)  <->  Header file (.h) |
	| Engineer’s   [Lv. 2] | Implementation  <->  Interface        |
	| Architect’s  [Lv. 3] | Computation     <->  Coordination     |
	+----------------------+---------------------------------------+

§3. HABITS & HYGIENE BUCKET LIST
---------------------------------

1. Header guards should use the format /^INC__([A-Z]+)_(([A-Z]+_)*[A-Z]+)_H$/,
where $1 is the project shortname in its all-caps form (in this case,
‘QLIBC’), $2 is the relative path to the file, in all-caps without its
extension, and $3 inside $2 contains the directory parts of the path with the
directory separator replaced with an underscore. Directories in between the
repository root and the source root are not included in said directory parts
(like ‘src/’, or a subdir for #include conflict resolution). For example, the
header guard for ‘src/owo/scenes/title.h’ would be
‘INC__QLIBC_CONTAINERS_QVECTOR_H’.

2. Header should hoist a comment boilerplate block with the project name and
its copyright notice. See BOILERPLATE for copy-pastable renditions of this.

3. Header should specify whether it exposes a state module, logic module, or
type module.

4. Both header and code files should #include all of the headers with symbols
they depend on, even if they happen to be #included in another header.

5. A code file with an associated header should #include it before all other
headers, using the local quotation mark style.
 a. All other headers should be #included using the angle bracket style.
 b. #include blocks (as described here) are separated by an empty line, for
 the autoformatter’s sake.
 c. C standard library headers should be #included in a block by themselves
 after the associated header #include (if present).
 d. All other headers should be #included in the last block.
 e. All #include blocks must be alphabetised (use the autoformatter for this).

6. Ensure that every commit to ‘master’ successfully compiles. You can do this
by running ‘make distclean’ and then ‘make format’ before a normal build. If
you need to do extensive work where failing WIP commits may need to be made,
create and push a new branch for that work and merge it when it’s done.

7. Always format your code with ‘make format’ before committing.

8. Do clean builds with address sanitisation (command ‘make asan’) to resolve
memory errors. It is good practise to make sure that there are no segfaults
of any kind during runtime. While normally we use ASan as it has much milder
performance hits than other solutions, some memory bugs will be stubborn – for
these, recompile the usual debug target and run it through Valgrind (Linux and
macOS only).

9. Before trudging through ASan or Valgrind, it may be helpful to identify
bugs more proactively with a sanity check build, which is available under the
‘make check’ recipe command. Compilers will have wildly varying degrees of
leniency towards undefined behaviour – don’t count on vendor defaults to tell
you everything CC knows.

10. Every non-static function should be documented in the corresponding text
file inside the ‘doc/’ folder, with a top-level section (§) dedicated to it.
